# Project configs
project_name:
  type: str
  default: My dbt Project
  help: The name of your project or organization.

project_slug:
  type: str
  default: "{{ project_name | lower | replace(' ', '_') | replace('-', '_') | replace('.', '') }}"
  help: The slugified name of your project.

# Warehouse profile connection configs
profile_name:
  type: str
  default: "{{ project_slug }}"
  help: |
    The name of your default dev profile, this is the set of configs for connecting 
    to your warehouse for development.

data_warehouse:
  type: str
  default: snowflake
  help: The data warehouse, platform, or database you're going to build in.
  choices:
    - snowflake
    - bigquery
    - databricks
    - redshift
    - postgres
    - duckdb

username:
  type: str
  help: The username you log in to your database with.
  when: "{{ data_warehouse in ['snowflake'] }}"

database:
  type: str
  help: |
    The name or id of the database (or project in BigQuery) *within* your data platform that you want to build into.

schema:
  type: str
  help: |
    The name of the schema (or dataset in BigQuery) in the database you want to build into.

thread_count:
  type: int
  default: 8
  help: How many threads you want to dbt to run in parallel?

# Snowflake-specific configs
account_id:
  type: str
  help: |
    This is usually most easily found in the url of your data warehouse's web app.
    Highly recommended to set this as an env var and put that env var name here not the value itself.
  when: "{{ data_warehouse == 'snowflake'}}"

user_role:
  type: str
  default: transformer
  help: The default user role to use for development.
  when: "{{ data_warehouse == 'snowflake' }}"

warehouse:
  type: str
  default: transforming
  help: The name of your default development compute warehouse.
  when: "{{ data_warehouse == 'snowflake' }}"

# BigQuery specific configs
# There are none for now! `oauth` with `gcloud` is great.

# Databricks specific configs

# Redshift specific configs

# Postgres specific configs

# DuckDB specific configs
duckdb_file_path:
  type: str
  default: "./{{ project_slug }}.db"
  help: |
    Where do you want to build your duckdb database file? 
    Strongly suggest the default, which will be automatically gitignored.
  when: "{{ data_warehouse == 'duckdb' }}"

# Formatting configs
tab_space_size:
  type: int
  default: 4
  help: How many spaces should the default tab alignment be?
  choices:
    - 2
    - 4

comma_alignment:
  type: str
  default: trailing
  help: Leading or trailing commas?
  choices:
    - trailing
    - leading

capitalization:
  type: str
  default: lowercase
  help: Should keywords, functions and other special commands be upper or lowercase?
  choices:
    - lowercase
    - uppercase

group_by_and_order_by_style:
  type: str
  default: implicit
  help: |
    Should group_by and order_by list field names (explicit â€” group by customer_id) 
    or numbers (implicit â€” group by 1)?
  choices:
    - implicit
    - explicit

# Task options
virtual_environment:
  type: bool
  default: False
  help: |
    Do you want copier to initialize and activate a virtual environment,
    and install dependencies?

init_repo:
  type: bool
  default: False
  help: |
    Do you want copier to initialize and make a first commit to a fresh git repo?

move_profile:
  type: bool
  default: False
  help: |
    Do you want copier to move the contents of your generated `profiles.yml` file
    to the appropriate place in your home directory (`~/.dbt/profiles.yml`)?

# Python configs
virtual_environment_name:
  type: str
  default: .venv
  help: What do you want your virtual environment to be called?
  when: "{{ virtual_environment }}"

# Files to exclude from template
_exclude:
  - "template-integration-tests"
  - "copier.yml"
  - "~*"
  - "*.py[co]"
  - "__pycache__"
  - ".pytest_cache"
  - ".git"
  - ".github"
  - ".DS_STORE"
  - "README.md"
  - ".venv"
  - ".env"
  - "venv"
  - "env"
  - "dev-requirements.txt"
  - "dev-requirements.in"

# Pre copy message
_message_before_copy: |
  Let's make a new dbt project in {{ _copier_conf.dst_path }}. âœ¨
  We'll ask you some questions, you will fill in the prompts,
  and we'll have you set up in no time.

  If at any time you change your mind just Ctrl+C to cancel,
  and nothing will get created. You can also cancel and pass
  a --pretend flag to do a run-through first before the real thing.

# Post cleanup message
_message_after_copy: |
  Your project "{{ project_name }}" has been created successfully! ðŸŽ‰

  Next steps:

  1. Change directory to the project root:

    $ cd {{ _copier_conf.dst_path }}

  2. Ensure the virtual environment is active:

    $ source {{ virtual_environment_name }}/bin/activate

  3. Run initial dbt build:

    $ dbt deps
    $ dbt build

# Tasks
_tasks:
  - "{% if virtual_environment %} python3 -m venv {{ virtual_environment_name }} {% endif %}"
  - "{% if virtual_environment %} source {{ virtual_environment_name }}/bin/activate {% endif %}"
  - "{% if virtual_environment %} python3 -m pip install --upgrade pip {% endif %}"
  - "{% if virtual_environment %} python3 -m pip install uv {% endif %}"
  - "{% if virtual_environment %} source {{ virtual_environment_name }}/bin/activate {% endif %}"
  - "{% if virtual_environment %} uv pip compile requirements.in -o requirements.txt {% endif %}"
  - "{% if virtual_environment %} uv pip install -r requirements.txt {% endif %}"
  - "{% if move_profile %} mkdir -p ~/.dbt && cat profiles.yml >> ~/.dbt/profiles.yml {% endif %}"
  - "{% if move_profile %} rm profiles.yml {% endif %}"
  - "{% if init_repo %} git init {% endif %}"
  - "{% if init_repo %} git add --all {% endif %}"
  - "{% if init_repo %} git commit -m 'Initial commit.' {% endif %}"
  - "{% if virtual_environment %} source {{ virtual_environment_name }}/bin/activate && pre-commit install {% endif %}"
